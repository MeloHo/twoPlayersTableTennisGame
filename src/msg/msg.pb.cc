// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class MsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg> _instance;
} _Msg_default_instance_;
static void InitDefaultsscc_info_Msg_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Msg_default_instance_;
    new (ptr) ::Msg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Msg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Msg_msg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_msg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Msg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Msg, ishitting_),
  PROTOBUF_FIELD_OFFSET(::Msg, playerid_),
  PROTOBUF_FIELD_OFFSET(::Msg, player1score_),
  PROTOBUF_FIELD_OFFSET(::Msg, player2score_),
  PROTOBUF_FIELD_OFFSET(::Msg, ballx_),
  PROTOBUF_FIELD_OFFSET(::Msg, bally_),
  PROTOBUF_FIELD_OFFSET(::Msg, ballz_),
  PROTOBUF_FIELD_OFFSET(::Msg, player1x_),
  PROTOBUF_FIELD_OFFSET(::Msg, player1y_),
  PROTOBUF_FIELD_OFFSET(::Msg, player1z_),
  PROTOBUF_FIELD_OFFSET(::Msg, player2x_),
  PROTOBUF_FIELD_OFFSET(::Msg, player2y_),
  PROTOBUF_FIELD_OFFSET(::Msg, player2z_),
  0,
  10,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  12,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::Msg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Msg_default_instance_),
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\"\357\001\n\003Msg\022\021\n\tisHitting\030\001 \002(\010\022\020"
  "\n\010playerId\030\020 \002(\005\022\024\n\014player1Score\030\002 \002(\005\022\024"
  "\n\014player2Score\030\003 \002(\005\022\r\n\005ballX\030\004 \002(\002\022\r\n\005b"
  "allY\030\005 \002(\002\022\r\n\005ballZ\030\006 \002(\002\022\020\n\010player1X\030\n "
  "\002(\005\022\020\n\010player1Y\030\013 \002(\005\022\020\n\010player1Z\030\014 \002(\005\022"
  "\020\n\010player2X\030\r \002(\005\022\020\n\010player2Y\030\016 \002(\005\022\020\n\010p"
  "layer2Z\030\017 \002(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_2eproto_sccs[1] = {
  &scc_info_Msg_msg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2eproto_once;
static bool descriptor_table_msg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto = {
  &descriptor_table_msg_2eproto_initialized, descriptor_table_protodef_msg_2eproto, "msg.proto", 253,
  &descriptor_table_msg_2eproto_once, descriptor_table_msg_2eproto_sccs, descriptor_table_msg_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
  file_level_metadata_msg_2eproto, 1, file_level_enum_descriptors_msg_2eproto, file_level_service_descriptors_msg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_2eproto), true);

// ===================================================================

void Msg::InitAsDefaultInstance() {
}
class Msg::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg>()._has_bits_);
  static void set_has_ishitting(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_player1score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player2score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ballx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bally(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ballz(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_player1x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_player1y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_player1z(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_player2x(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_player2y(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_player2z(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

Msg::Msg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Msg)
}
Msg::Msg(const Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ishitting_, &from.ishitting_,
    static_cast<size_t>(reinterpret_cast<char*>(&player2z_) -
    reinterpret_cast<char*>(&ishitting_)) + sizeof(player2z_));
  // @@protoc_insertion_point(copy_constructor:Msg)
}

void Msg::SharedCtor() {
  ::memset(&ishitting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player2z_) -
      reinterpret_cast<char*>(&ishitting_)) + sizeof(player2z_));
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:Msg)
  SharedDtor();
}

void Msg::SharedDtor() {
}

void Msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg& Msg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_msg_2eproto.base);
  return *internal_default_instance();
}


void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ishitting_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player1y_) -
        reinterpret_cast<char*>(&ishitting_)) + sizeof(player1y_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&player1z_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player2z_) -
        reinterpret_cast<char*>(&player1z_)) + sizeof(player2z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool isHitting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ishitting(&has_bits);
          ishitting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 player1Score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player1score(&has_bits);
          player1score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 player2Score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_player2score(&has_bits);
          player2score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float ballX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ballx(&has_bits);
          ballx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float ballY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_bally(&has_bits);
          bally_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float ballZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ballz(&has_bits);
          ballz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 player1X = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_player1x(&has_bits);
          player1x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 player1Y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_player1y(&has_bits);
          player1y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 player1Z = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_player1z(&has_bits);
          player1z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 player2X = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_player2x(&has_bits);
          player2x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 player2Y = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_player2y(&has_bits);
          player2y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 player2Z = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_player2z(&has_bits);
          player2z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 playerId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool isHitting = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ishitting(), target);
  }

  // required int32 player1Score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player1score(), target);
  }

  // required int32 player2Score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_player2score(), target);
  }

  // required float ballX = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_ballx(), target);
  }

  // required float ballY = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_bally(), target);
  }

  // required float ballZ = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ballz(), target);
  }

  // required int32 player1X = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_player1x(), target);
  }

  // required int32 player1Y = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_player1y(), target);
  }

  // required int32 player1Z = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_player1z(), target);
  }

  // required int32 player2X = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_player2x(), target);
  }

  // required int32 player2Y = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_player2y(), target);
  }

  // required int32 player2Z = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_player2z(), target);
  }

  // required int32 playerId = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Msg)
  return target;
}

size_t Msg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Msg)
  size_t total_size = 0;

  if (_internal_has_ishitting()) {
    // required bool isHitting = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_player1score()) {
    // required int32 player1Score = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player1score());
  }

  if (_internal_has_player2score()) {
    // required int32 player2Score = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player2score());
  }

  if (_internal_has_ballx()) {
    // required float ballX = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_bally()) {
    // required float ballY = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_ballz()) {
    // required float ballZ = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_player1x()) {
    // required int32 player1X = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player1x());
  }

  if (_internal_has_player1y()) {
    // required int32 player1Y = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player1y());
  }

  if (_internal_has_player1z()) {
    // required int32 player1Z = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player1z());
  }

  if (_internal_has_player2x()) {
    // required int32 player2X = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player2x());
  }

  if (_internal_has_playerid()) {
    // required int32 playerId = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (_internal_has_player2y()) {
    // required int32 player2Y = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player2y());
  }

  if (_internal_has_player2z()) {
    // required int32 player2Z = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player2z());
  }

  return total_size;
}
size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Msg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required bool isHitting = 1;
    total_size += 1 + 1;

    // required int32 player1Score = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player1score());

    // required int32 player2Score = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player2score());

    // required float ballX = 4;
    total_size += 1 + 4;

    // required float ballY = 5;
    total_size += 1 + 4;

    // required float ballZ = 6;
    total_size += 1 + 4;

    // required int32 player1X = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player1x());

    // required int32 player1Y = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player1y());

    // required int32 player1Z = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player1z());

    // required int32 player2X = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player2x());

    // required int32 playerId = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());

    // required int32 player2Y = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player2y());

    // required int32 player2Z = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player2z());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Msg)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Msg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Msg)
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ishitting_ = from.ishitting_;
    }
    if (cached_has_bits & 0x00000002u) {
      player1score_ = from.player1score_;
    }
    if (cached_has_bits & 0x00000004u) {
      player2score_ = from.player2score_;
    }
    if (cached_has_bits & 0x00000008u) {
      ballx_ = from.ballx_;
    }
    if (cached_has_bits & 0x00000010u) {
      bally_ = from.bally_;
    }
    if (cached_has_bits & 0x00000020u) {
      ballz_ = from.ballz_;
    }
    if (cached_has_bits & 0x00000040u) {
      player1x_ = from.player1x_;
    }
    if (cached_has_bits & 0x00000080u) {
      player1y_ = from.player1y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      player1z_ = from.player1z_;
    }
    if (cached_has_bits & 0x00000200u) {
      player2x_ = from.player2x_;
    }
    if (cached_has_bits & 0x00000400u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000800u) {
      player2y_ = from.player2y_;
    }
    if (cached_has_bits & 0x00001000u) {
      player2z_ = from.player2z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Msg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  return true;
}

void Msg::InternalSwap(Msg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ishitting_, other->ishitting_);
  swap(player1score_, other->player1score_);
  swap(player2score_, other->player2score_);
  swap(ballx_, other->ballx_);
  swap(bally_, other->bally_);
  swap(ballz_, other->ballz_);
  swap(player1x_, other->player1x_);
  swap(player1y_, other->player1y_);
  swap(player1z_, other->player1z_);
  swap(player2x_, other->player2x_);
  swap(playerid_, other->playerid_);
  swap(player2y_, other->player2y_);
  swap(player2z_, other->player2z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Msg* Arena::CreateMaybeMessage< ::Msg >(Arena* arena) {
  return Arena::CreateInternal< ::Msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
