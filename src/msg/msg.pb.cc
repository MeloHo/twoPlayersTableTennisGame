// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  Msg_descriptor_ = file->message_type(0);
  static const int Msg_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, ishitting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, player1score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, player2score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, ballx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, bally_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, ballz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, player1x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, player1y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, player1z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, player2x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, player2y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, player2z_),
  };
  Msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Msg_descriptor_,
      Msg::default_instance_,
      Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _has_bits_[0]),
      -1,
      -1,
      sizeof(Msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Msg_descriptor_, &Msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete Msg::default_instance_;
  delete Msg_reflection_;
}

void protobuf_AddDesc_msg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\"\357\001\n\003Msg\022\021\n\tisHitting\030\001 \002(\010\022\020"
    "\n\010playerId\030\020 \002(\005\022\024\n\014player1Score\030\002 \002(\005\022\024"
    "\n\014player2Score\030\003 \002(\005\022\r\n\005ballX\030\004 \002(\002\022\r\n\005b"
    "allY\030\005 \002(\002\022\r\n\005ballZ\030\006 \002(\002\022\020\n\010player1X\030\n "
    "\002(\005\022\020\n\010player1Y\030\013 \002(\005\022\020\n\010player1Z\030\014 \002(\005\022"
    "\020\n\010player2X\030\r \002(\005\022\020\n\010player2Y\030\016 \002(\005\022\020\n\010p"
    "layer2Z\030\017 \002(\005", 253);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  Msg::default_instance_ = new Msg();
  Msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg::kIsHittingFieldNumber;
const int Msg::kPlayerIdFieldNumber;
const int Msg::kPlayer1ScoreFieldNumber;
const int Msg::kPlayer2ScoreFieldNumber;
const int Msg::kBallXFieldNumber;
const int Msg::kBallYFieldNumber;
const int Msg::kBallZFieldNumber;
const int Msg::kPlayer1XFieldNumber;
const int Msg::kPlayer1YFieldNumber;
const int Msg::kPlayer1ZFieldNumber;
const int Msg::kPlayer2XFieldNumber;
const int Msg::kPlayer2YFieldNumber;
const int Msg::kPlayer2ZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg::Msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Msg)
}

void Msg::InitAsDefaultInstance() {
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Msg)
}

void Msg::SharedCtor() {
  _cached_size_ = 0;
  ishitting_ = false;
  playerid_ = 0;
  player1score_ = 0;
  player2score_ = 0;
  ballx_ = 0;
  bally_ = 0;
  ballz_ = 0;
  player1x_ = 0;
  player1y_ = 0;
  player1z_ = 0;
  player2x_ = 0;
  player2y_ = 0;
  player2z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:Msg)
  SharedDtor();
}

void Msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Msg* Msg::default_instance_ = NULL;

Msg* Msg::New(::google::protobuf::Arena* arena) const {
  Msg* n = new Msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:Msg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Msg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Msg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(ishitting_, player1x_);
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(player1y_, player2z_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isHitting = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishitting_)));
          set_has_ishitting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player1Score;
        break;
      }

      // required int32 player1Score = 2;
      case 2: {
        if (tag == 16) {
         parse_player1Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player1score_)));
          set_has_player1score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player2Score;
        break;
      }

      // required int32 player2Score = 3;
      case 3: {
        if (tag == 24) {
         parse_player2Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player2score_)));
          set_has_player2score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_ballX;
        break;
      }

      // required float ballX = 4;
      case 4: {
        if (tag == 37) {
         parse_ballX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ballx_)));
          set_has_ballx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_ballY;
        break;
      }

      // required float ballY = 5;
      case 5: {
        if (tag == 45) {
         parse_ballY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bally_)));
          set_has_bally();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_ballZ;
        break;
      }

      // required float ballZ = 6;
      case 6: {
        if (tag == 53) {
         parse_ballZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ballz_)));
          set_has_ballz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_player1X;
        break;
      }

      // required int32 player1X = 10;
      case 10: {
        if (tag == 80) {
         parse_player1X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player1x_)));
          set_has_player1x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_player1Y;
        break;
      }

      // required int32 player1Y = 11;
      case 11: {
        if (tag == 88) {
         parse_player1Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player1y_)));
          set_has_player1y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_player1Z;
        break;
      }

      // required int32 player1Z = 12;
      case 12: {
        if (tag == 96) {
         parse_player1Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player1z_)));
          set_has_player1z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_player2X;
        break;
      }

      // required int32 player2X = 13;
      case 13: {
        if (tag == 104) {
         parse_player2X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player2x_)));
          set_has_player2x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_player2Y;
        break;
      }

      // required int32 player2Y = 14;
      case 14: {
        if (tag == 112) {
         parse_player2Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player2y_)));
          set_has_player2y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_player2Z;
        break;
      }

      // required int32 player2Z = 15;
      case 15: {
        if (tag == 120) {
         parse_player2Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player2z_)));
          set_has_player2z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_playerId;
        break;
      }

      // required int32 playerId = 16;
      case 16: {
        if (tag == 128) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Msg)
  return false;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Msg)
  // required bool isHitting = 1;
  if (has_ishitting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ishitting(), output);
  }

  // required int32 player1Score = 2;
  if (has_player1score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player1score(), output);
  }

  // required int32 player2Score = 3;
  if (has_player2score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player2score(), output);
  }

  // required float ballX = 4;
  if (has_ballx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ballx(), output);
  }

  // required float ballY = 5;
  if (has_bally()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bally(), output);
  }

  // required float ballZ = 6;
  if (has_ballz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ballz(), output);
  }

  // required int32 player1X = 10;
  if (has_player1x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->player1x(), output);
  }

  // required int32 player1Y = 11;
  if (has_player1y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->player1y(), output);
  }

  // required int32 player1Z = 12;
  if (has_player1z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->player1z(), output);
  }

  // required int32 player2X = 13;
  if (has_player2x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->player2x(), output);
  }

  // required int32 player2Y = 14;
  if (has_player2y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->player2y(), output);
  }

  // required int32 player2Z = 15;
  if (has_player2z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->player2z(), output);
  }

  // required int32 playerId = 16;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->playerid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Msg)
}

::google::protobuf::uint8* Msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg)
  // required bool isHitting = 1;
  if (has_ishitting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ishitting(), target);
  }

  // required int32 player1Score = 2;
  if (has_player1score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player1score(), target);
  }

  // required int32 player2Score = 3;
  if (has_player2score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player2score(), target);
  }

  // required float ballX = 4;
  if (has_ballx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ballx(), target);
  }

  // required float ballY = 5;
  if (has_bally()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bally(), target);
  }

  // required float ballZ = 6;
  if (has_ballz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ballz(), target);
  }

  // required int32 player1X = 10;
  if (has_player1x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->player1x(), target);
  }

  // required int32 player1Y = 11;
  if (has_player1y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->player1y(), target);
  }

  // required int32 player1Z = 12;
  if (has_player1z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->player1z(), target);
  }

  // required int32 player2X = 13;
  if (has_player2x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->player2x(), target);
  }

  // required int32 player2Y = 14;
  if (has_player2y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->player2y(), target);
  }

  // required int32 player2Z = 15;
  if (has_player2z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->player2z(), target);
  }

  // required int32 playerId = 16;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->playerid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Msg)
  return target;
}

int Msg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Msg)
  int total_size = 0;

  if (has_ishitting()) {
    // required bool isHitting = 1;
    total_size += 1 + 1;
  }

  if (has_playerid()) {
    // required int32 playerId = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  if (has_player1score()) {
    // required int32 player1Score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player1score());
  }

  if (has_player2score()) {
    // required int32 player2Score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player2score());
  }

  if (has_ballx()) {
    // required float ballX = 4;
    total_size += 1 + 4;
  }

  if (has_bally()) {
    // required float ballY = 5;
    total_size += 1 + 4;
  }

  if (has_ballz()) {
    // required float ballZ = 6;
    total_size += 1 + 4;
  }

  if (has_player1x()) {
    // required int32 player1X = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player1x());
  }

  if (has_player1y()) {
    // required int32 player1Y = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player1y());
  }

  if (has_player1z()) {
    // required int32 player1Z = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player1z());
  }

  if (has_player2x()) {
    // required int32 player2X = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player2x());
  }

  if (has_player2y()) {
    // required int32 player2Y = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player2y());
  }

  if (has_player2z()) {
    // required int32 player2Z = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player2z());
  }

  return total_size;
}
int Msg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Msg)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required bool isHitting = 1;
    total_size += 1 + 1;

    // required int32 playerId = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());

    // required int32 player1Score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player1score());

    // required int32 player2Score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player2score());

    // required float ballX = 4;
    total_size += 1 + 4;

    // required float ballY = 5;
    total_size += 1 + 4;

    // required float ballZ = 6;
    total_size += 1 + 4;

    // required int32 player1X = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player1x());

    // required int32 player1Y = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player1y());

    // required int32 player1Z = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player1z());

    // required int32 player2X = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player2x());

    // required int32 player2Y = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player2y());

    // required int32 player2Z = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player2z());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Msg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Msg)
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishitting()) {
      set_ishitting(from.ishitting());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_player1score()) {
      set_player1score(from.player1score());
    }
    if (from.has_player2score()) {
      set_player2score(from.player2score());
    }
    if (from.has_ballx()) {
      set_ballx(from.ballx());
    }
    if (from.has_bally()) {
      set_bally(from.bally());
    }
    if (from.has_ballz()) {
      set_ballz(from.ballz());
    }
    if (from.has_player1x()) {
      set_player1x(from.player1x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_player1y()) {
      set_player1y(from.player1y());
    }
    if (from.has_player1z()) {
      set_player1z(from.player1z());
    }
    if (from.has_player2x()) {
      set_player2x(from.player2x());
    }
    if (from.has_player2y()) {
      set_player2y(from.player2y());
    }
    if (from.has_player2z()) {
      set_player2z(from.player2z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void Msg::Swap(Msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg::InternalSwap(Msg* other) {
  std::swap(ishitting_, other->ishitting_);
  std::swap(playerid_, other->playerid_);
  std::swap(player1score_, other->player1score_);
  std::swap(player2score_, other->player2score_);
  std::swap(ballx_, other->ballx_);
  std::swap(bally_, other->bally_);
  std::swap(ballz_, other->ballz_);
  std::swap(player1x_, other->player1x_);
  std::swap(player1y_, other->player1y_);
  std::swap(player1z_, other->player1z_);
  std::swap(player2x_, other->player2x_);
  std::swap(player2y_, other->player2y_);
  std::swap(player2z_, other->player2z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Msg

// required bool isHitting = 1;
bool Msg::has_ishitting() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Msg::set_has_ishitting() {
  _has_bits_[0] |= 0x00000001u;
}
void Msg::clear_has_ishitting() {
  _has_bits_[0] &= ~0x00000001u;
}
void Msg::clear_ishitting() {
  ishitting_ = false;
  clear_has_ishitting();
}
 bool Msg::ishitting() const {
  // @@protoc_insertion_point(field_get:Msg.isHitting)
  return ishitting_;
}
 void Msg::set_ishitting(bool value) {
  set_has_ishitting();
  ishitting_ = value;
  // @@protoc_insertion_point(field_set:Msg.isHitting)
}

// required int32 playerId = 16;
bool Msg::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Msg::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void Msg::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Msg::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
 ::google::protobuf::int32 Msg::playerid() const {
  // @@protoc_insertion_point(field_get:Msg.playerId)
  return playerid_;
}
 void Msg::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:Msg.playerId)
}

// required int32 player1Score = 2;
bool Msg::has_player1score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Msg::set_has_player1score() {
  _has_bits_[0] |= 0x00000004u;
}
void Msg::clear_has_player1score() {
  _has_bits_[0] &= ~0x00000004u;
}
void Msg::clear_player1score() {
  player1score_ = 0;
  clear_has_player1score();
}
 ::google::protobuf::int32 Msg::player1score() const {
  // @@protoc_insertion_point(field_get:Msg.player1Score)
  return player1score_;
}
 void Msg::set_player1score(::google::protobuf::int32 value) {
  set_has_player1score();
  player1score_ = value;
  // @@protoc_insertion_point(field_set:Msg.player1Score)
}

// required int32 player2Score = 3;
bool Msg::has_player2score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Msg::set_has_player2score() {
  _has_bits_[0] |= 0x00000008u;
}
void Msg::clear_has_player2score() {
  _has_bits_[0] &= ~0x00000008u;
}
void Msg::clear_player2score() {
  player2score_ = 0;
  clear_has_player2score();
}
 ::google::protobuf::int32 Msg::player2score() const {
  // @@protoc_insertion_point(field_get:Msg.player2Score)
  return player2score_;
}
 void Msg::set_player2score(::google::protobuf::int32 value) {
  set_has_player2score();
  player2score_ = value;
  // @@protoc_insertion_point(field_set:Msg.player2Score)
}

// required float ballX = 4;
bool Msg::has_ballx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Msg::set_has_ballx() {
  _has_bits_[0] |= 0x00000010u;
}
void Msg::clear_has_ballx() {
  _has_bits_[0] &= ~0x00000010u;
}
void Msg::clear_ballx() {
  ballx_ = 0;
  clear_has_ballx();
}
 float Msg::ballx() const {
  // @@protoc_insertion_point(field_get:Msg.ballX)
  return ballx_;
}
 void Msg::set_ballx(float value) {
  set_has_ballx();
  ballx_ = value;
  // @@protoc_insertion_point(field_set:Msg.ballX)
}

// required float ballY = 5;
bool Msg::has_bally() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Msg::set_has_bally() {
  _has_bits_[0] |= 0x00000020u;
}
void Msg::clear_has_bally() {
  _has_bits_[0] &= ~0x00000020u;
}
void Msg::clear_bally() {
  bally_ = 0;
  clear_has_bally();
}
 float Msg::bally() const {
  // @@protoc_insertion_point(field_get:Msg.ballY)
  return bally_;
}
 void Msg::set_bally(float value) {
  set_has_bally();
  bally_ = value;
  // @@protoc_insertion_point(field_set:Msg.ballY)
}

// required float ballZ = 6;
bool Msg::has_ballz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Msg::set_has_ballz() {
  _has_bits_[0] |= 0x00000040u;
}
void Msg::clear_has_ballz() {
  _has_bits_[0] &= ~0x00000040u;
}
void Msg::clear_ballz() {
  ballz_ = 0;
  clear_has_ballz();
}
 float Msg::ballz() const {
  // @@protoc_insertion_point(field_get:Msg.ballZ)
  return ballz_;
}
 void Msg::set_ballz(float value) {
  set_has_ballz();
  ballz_ = value;
  // @@protoc_insertion_point(field_set:Msg.ballZ)
}

// required int32 player1X = 10;
bool Msg::has_player1x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Msg::set_has_player1x() {
  _has_bits_[0] |= 0x00000080u;
}
void Msg::clear_has_player1x() {
  _has_bits_[0] &= ~0x00000080u;
}
void Msg::clear_player1x() {
  player1x_ = 0;
  clear_has_player1x();
}
 ::google::protobuf::int32 Msg::player1x() const {
  // @@protoc_insertion_point(field_get:Msg.player1X)
  return player1x_;
}
 void Msg::set_player1x(::google::protobuf::int32 value) {
  set_has_player1x();
  player1x_ = value;
  // @@protoc_insertion_point(field_set:Msg.player1X)
}

// required int32 player1Y = 11;
bool Msg::has_player1y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Msg::set_has_player1y() {
  _has_bits_[0] |= 0x00000100u;
}
void Msg::clear_has_player1y() {
  _has_bits_[0] &= ~0x00000100u;
}
void Msg::clear_player1y() {
  player1y_ = 0;
  clear_has_player1y();
}
 ::google::protobuf::int32 Msg::player1y() const {
  // @@protoc_insertion_point(field_get:Msg.player1Y)
  return player1y_;
}
 void Msg::set_player1y(::google::protobuf::int32 value) {
  set_has_player1y();
  player1y_ = value;
  // @@protoc_insertion_point(field_set:Msg.player1Y)
}

// required int32 player1Z = 12;
bool Msg::has_player1z() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Msg::set_has_player1z() {
  _has_bits_[0] |= 0x00000200u;
}
void Msg::clear_has_player1z() {
  _has_bits_[0] &= ~0x00000200u;
}
void Msg::clear_player1z() {
  player1z_ = 0;
  clear_has_player1z();
}
 ::google::protobuf::int32 Msg::player1z() const {
  // @@protoc_insertion_point(field_get:Msg.player1Z)
  return player1z_;
}
 void Msg::set_player1z(::google::protobuf::int32 value) {
  set_has_player1z();
  player1z_ = value;
  // @@protoc_insertion_point(field_set:Msg.player1Z)
}

// required int32 player2X = 13;
bool Msg::has_player2x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Msg::set_has_player2x() {
  _has_bits_[0] |= 0x00000400u;
}
void Msg::clear_has_player2x() {
  _has_bits_[0] &= ~0x00000400u;
}
void Msg::clear_player2x() {
  player2x_ = 0;
  clear_has_player2x();
}
 ::google::protobuf::int32 Msg::player2x() const {
  // @@protoc_insertion_point(field_get:Msg.player2X)
  return player2x_;
}
 void Msg::set_player2x(::google::protobuf::int32 value) {
  set_has_player2x();
  player2x_ = value;
  // @@protoc_insertion_point(field_set:Msg.player2X)
}

// required int32 player2Y = 14;
bool Msg::has_player2y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Msg::set_has_player2y() {
  _has_bits_[0] |= 0x00000800u;
}
void Msg::clear_has_player2y() {
  _has_bits_[0] &= ~0x00000800u;
}
void Msg::clear_player2y() {
  player2y_ = 0;
  clear_has_player2y();
}
 ::google::protobuf::int32 Msg::player2y() const {
  // @@protoc_insertion_point(field_get:Msg.player2Y)
  return player2y_;
}
 void Msg::set_player2y(::google::protobuf::int32 value) {
  set_has_player2y();
  player2y_ = value;
  // @@protoc_insertion_point(field_set:Msg.player2Y)
}

// required int32 player2Z = 15;
bool Msg::has_player2z() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Msg::set_has_player2z() {
  _has_bits_[0] |= 0x00001000u;
}
void Msg::clear_has_player2z() {
  _has_bits_[0] &= ~0x00001000u;
}
void Msg::clear_player2z() {
  player2z_ = 0;
  clear_has_player2z();
}
 ::google::protobuf::int32 Msg::player2z() const {
  // @@protoc_insertion_point(field_get:Msg.player2Z)
  return player2z_;
}
 void Msg::set_player2z(::google::protobuf::int32 value) {
  set_has_player2z();
  player2z_ = value;
  // @@protoc_insertion_point(field_set:Msg.player2Z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
