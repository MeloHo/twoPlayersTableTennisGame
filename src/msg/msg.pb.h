// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
class Msg;
class MsgDefaultTypeInternal;
extern MsgDefaultTypeInternal _Msg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Msg* Arena::CreateMaybeMessage<::Msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Msg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg) */ {
 public:
  Msg();
  virtual ~Msg();

  Msg(const Msg& from);
  Msg(Msg&& from) noexcept
    : Msg() {
    *this = ::std::move(from);
  }

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg& operator=(Msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg* internal_default_instance() {
    return reinterpret_cast<const Msg*>(
               &_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Msg& a, Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Msg* New() const final {
    return CreateMaybeMessage<Msg>(nullptr);
  }

  Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsHittingFieldNumber = 1,
    kPlayer1ScoreFieldNumber = 2,
    kPlayer2ScoreFieldNumber = 3,
    kBallXFieldNumber = 4,
    kBallYFieldNumber = 5,
    kBallZFieldNumber = 6,
    kPlayer1XFieldNumber = 10,
    kPlayer1YFieldNumber = 11,
    kPlayer1ZFieldNumber = 12,
    kPlayer2XFieldNumber = 13,
    kPlayerIdFieldNumber = 16,
    kPlayer2YFieldNumber = 14,
    kPlayer2ZFieldNumber = 15,
  };
  // required bool isHitting = 1;
  bool has_ishitting() const;
  private:
  bool _internal_has_ishitting() const;
  public:
  void clear_ishitting();
  bool ishitting() const;
  void set_ishitting(bool value);
  private:
  bool _internal_ishitting() const;
  void _internal_set_ishitting(bool value);
  public:

  // required int32 player1Score = 2;
  bool has_player1score() const;
  private:
  bool _internal_has_player1score() const;
  public:
  void clear_player1score();
  ::PROTOBUF_NAMESPACE_ID::int32 player1score() const;
  void set_player1score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player1score() const;
  void _internal_set_player1score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 player2Score = 3;
  bool has_player2score() const;
  private:
  bool _internal_has_player2score() const;
  public:
  void clear_player2score();
  ::PROTOBUF_NAMESPACE_ID::int32 player2score() const;
  void set_player2score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player2score() const;
  void _internal_set_player2score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float ballX = 4;
  bool has_ballx() const;
  private:
  bool _internal_has_ballx() const;
  public:
  void clear_ballx();
  float ballx() const;
  void set_ballx(float value);
  private:
  float _internal_ballx() const;
  void _internal_set_ballx(float value);
  public:

  // required float ballY = 5;
  bool has_bally() const;
  private:
  bool _internal_has_bally() const;
  public:
  void clear_bally();
  float bally() const;
  void set_bally(float value);
  private:
  float _internal_bally() const;
  void _internal_set_bally(float value);
  public:

  // required float ballZ = 6;
  bool has_ballz() const;
  private:
  bool _internal_has_ballz() const;
  public:
  void clear_ballz();
  float ballz() const;
  void set_ballz(float value);
  private:
  float _internal_ballz() const;
  void _internal_set_ballz(float value);
  public:

  // required float player1X = 10;
  bool has_player1x() const;
  private:
  bool _internal_has_player1x() const;
  public:
  void clear_player1x();
  float player1x() const;
  void set_player1x(float value);
  private:
  float _internal_player1x() const;
  void _internal_set_player1x(float value);
  public:

  // required float player1Y = 11;
  bool has_player1y() const;
  private:
  bool _internal_has_player1y() const;
  public:
  void clear_player1y();
  float player1y() const;
  void set_player1y(float value);
  private:
  float _internal_player1y() const;
  void _internal_set_player1y(float value);
  public:

  // required float player1Z = 12;
  bool has_player1z() const;
  private:
  bool _internal_has_player1z() const;
  public:
  void clear_player1z();
  float player1z() const;
  void set_player1z(float value);
  private:
  float _internal_player1z() const;
  void _internal_set_player1z(float value);
  public:

  // required float player2X = 13;
  bool has_player2x() const;
  private:
  bool _internal_has_player2x() const;
  public:
  void clear_player2x();
  float player2x() const;
  void set_player2x(float value);
  private:
  float _internal_player2x() const;
  void _internal_set_player2x(float value);
  public:

  // required int32 playerId = 16;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float player2Y = 14;
  bool has_player2y() const;
  private:
  bool _internal_has_player2y() const;
  public:
  void clear_player2y();
  float player2y() const;
  void set_player2y(float value);
  private:
  float _internal_player2y() const;
  void _internal_set_player2y(float value);
  public:

  // required float player2Z = 15;
  bool has_player2z() const;
  private:
  bool _internal_has_player2z() const;
  public:
  void clear_player2z();
  float player2z() const;
  void set_player2z(float value);
  private:
  float _internal_player2z() const;
  void _internal_set_player2z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Msg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool ishitting_;
  ::PROTOBUF_NAMESPACE_ID::int32 player1score_;
  ::PROTOBUF_NAMESPACE_ID::int32 player2score_;
  float ballx_;
  float bally_;
  float ballz_;
  float player1x_;
  float player1y_;
  float player1z_;
  float player2x_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  float player2y_;
  float player2z_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Msg

// required bool isHitting = 1;
inline bool Msg::_internal_has_ishitting() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg::has_ishitting() const {
  return _internal_has_ishitting();
}
inline void Msg::clear_ishitting() {
  ishitting_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Msg::_internal_ishitting() const {
  return ishitting_;
}
inline bool Msg::ishitting() const {
  // @@protoc_insertion_point(field_get:Msg.isHitting)
  return _internal_ishitting();
}
inline void Msg::_internal_set_ishitting(bool value) {
  _has_bits_[0] |= 0x00000001u;
  ishitting_ = value;
}
inline void Msg::set_ishitting(bool value) {
  _internal_set_ishitting(value);
  // @@protoc_insertion_point(field_set:Msg.isHitting)
}

// required int32 playerId = 16;
inline bool Msg::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Msg::has_playerid() const {
  return _internal_has_playerid();
}
inline void Msg::clear_playerid() {
  playerid_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::playerid() const {
  // @@protoc_insertion_point(field_get:Msg.playerId)
  return _internal_playerid();
}
inline void Msg::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  playerid_ = value;
}
inline void Msg::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Msg.playerId)
}

// required int32 player1Score = 2;
inline bool Msg::_internal_has_player1score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg::has_player1score() const {
  return _internal_has_player1score();
}
inline void Msg::clear_player1score() {
  player1score_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::_internal_player1score() const {
  return player1score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::player1score() const {
  // @@protoc_insertion_point(field_get:Msg.player1Score)
  return _internal_player1score();
}
inline void Msg::_internal_set_player1score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  player1score_ = value;
}
inline void Msg::set_player1score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player1score(value);
  // @@protoc_insertion_point(field_set:Msg.player1Score)
}

// required int32 player2Score = 3;
inline bool Msg::_internal_has_player2score() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Msg::has_player2score() const {
  return _internal_has_player2score();
}
inline void Msg::clear_player2score() {
  player2score_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::_internal_player2score() const {
  return player2score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::player2score() const {
  // @@protoc_insertion_point(field_get:Msg.player2Score)
  return _internal_player2score();
}
inline void Msg::_internal_set_player2score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  player2score_ = value;
}
inline void Msg::set_player2score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player2score(value);
  // @@protoc_insertion_point(field_set:Msg.player2Score)
}

// required float ballX = 4;
inline bool Msg::_internal_has_ballx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Msg::has_ballx() const {
  return _internal_has_ballx();
}
inline void Msg::clear_ballx() {
  ballx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Msg::_internal_ballx() const {
  return ballx_;
}
inline float Msg::ballx() const {
  // @@protoc_insertion_point(field_get:Msg.ballX)
  return _internal_ballx();
}
inline void Msg::_internal_set_ballx(float value) {
  _has_bits_[0] |= 0x00000008u;
  ballx_ = value;
}
inline void Msg::set_ballx(float value) {
  _internal_set_ballx(value);
  // @@protoc_insertion_point(field_set:Msg.ballX)
}

// required float ballY = 5;
inline bool Msg::_internal_has_bally() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Msg::has_bally() const {
  return _internal_has_bally();
}
inline void Msg::clear_bally() {
  bally_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Msg::_internal_bally() const {
  return bally_;
}
inline float Msg::bally() const {
  // @@protoc_insertion_point(field_get:Msg.ballY)
  return _internal_bally();
}
inline void Msg::_internal_set_bally(float value) {
  _has_bits_[0] |= 0x00000010u;
  bally_ = value;
}
inline void Msg::set_bally(float value) {
  _internal_set_bally(value);
  // @@protoc_insertion_point(field_set:Msg.ballY)
}

// required float ballZ = 6;
inline bool Msg::_internal_has_ballz() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Msg::has_ballz() const {
  return _internal_has_ballz();
}
inline void Msg::clear_ballz() {
  ballz_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Msg::_internal_ballz() const {
  return ballz_;
}
inline float Msg::ballz() const {
  // @@protoc_insertion_point(field_get:Msg.ballZ)
  return _internal_ballz();
}
inline void Msg::_internal_set_ballz(float value) {
  _has_bits_[0] |= 0x00000020u;
  ballz_ = value;
}
inline void Msg::set_ballz(float value) {
  _internal_set_ballz(value);
  // @@protoc_insertion_point(field_set:Msg.ballZ)
}

// required float player1X = 10;
inline bool Msg::_internal_has_player1x() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Msg::has_player1x() const {
  return _internal_has_player1x();
}
inline void Msg::clear_player1x() {
  player1x_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Msg::_internal_player1x() const {
  return player1x_;
}
inline float Msg::player1x() const {
  // @@protoc_insertion_point(field_get:Msg.player1X)
  return _internal_player1x();
}
inline void Msg::_internal_set_player1x(float value) {
  _has_bits_[0] |= 0x00000040u;
  player1x_ = value;
}
inline void Msg::set_player1x(float value) {
  _internal_set_player1x(value);
  // @@protoc_insertion_point(field_set:Msg.player1X)
}

// required float player1Y = 11;
inline bool Msg::_internal_has_player1y() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Msg::has_player1y() const {
  return _internal_has_player1y();
}
inline void Msg::clear_player1y() {
  player1y_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Msg::_internal_player1y() const {
  return player1y_;
}
inline float Msg::player1y() const {
  // @@protoc_insertion_point(field_get:Msg.player1Y)
  return _internal_player1y();
}
inline void Msg::_internal_set_player1y(float value) {
  _has_bits_[0] |= 0x00000080u;
  player1y_ = value;
}
inline void Msg::set_player1y(float value) {
  _internal_set_player1y(value);
  // @@protoc_insertion_point(field_set:Msg.player1Y)
}

// required float player1Z = 12;
inline bool Msg::_internal_has_player1z() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Msg::has_player1z() const {
  return _internal_has_player1z();
}
inline void Msg::clear_player1z() {
  player1z_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Msg::_internal_player1z() const {
  return player1z_;
}
inline float Msg::player1z() const {
  // @@protoc_insertion_point(field_get:Msg.player1Z)
  return _internal_player1z();
}
inline void Msg::_internal_set_player1z(float value) {
  _has_bits_[0] |= 0x00000100u;
  player1z_ = value;
}
inline void Msg::set_player1z(float value) {
  _internal_set_player1z(value);
  // @@protoc_insertion_point(field_set:Msg.player1Z)
}

// required float player2X = 13;
inline bool Msg::_internal_has_player2x() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Msg::has_player2x() const {
  return _internal_has_player2x();
}
inline void Msg::clear_player2x() {
  player2x_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float Msg::_internal_player2x() const {
  return player2x_;
}
inline float Msg::player2x() const {
  // @@protoc_insertion_point(field_get:Msg.player2X)
  return _internal_player2x();
}
inline void Msg::_internal_set_player2x(float value) {
  _has_bits_[0] |= 0x00000200u;
  player2x_ = value;
}
inline void Msg::set_player2x(float value) {
  _internal_set_player2x(value);
  // @@protoc_insertion_point(field_set:Msg.player2X)
}

// required float player2Y = 14;
inline bool Msg::_internal_has_player2y() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Msg::has_player2y() const {
  return _internal_has_player2y();
}
inline void Msg::clear_player2y() {
  player2y_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float Msg::_internal_player2y() const {
  return player2y_;
}
inline float Msg::player2y() const {
  // @@protoc_insertion_point(field_get:Msg.player2Y)
  return _internal_player2y();
}
inline void Msg::_internal_set_player2y(float value) {
  _has_bits_[0] |= 0x00000800u;
  player2y_ = value;
}
inline void Msg::set_player2y(float value) {
  _internal_set_player2y(value);
  // @@protoc_insertion_point(field_set:Msg.player2Y)
}

// required float player2Z = 15;
inline bool Msg::_internal_has_player2z() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Msg::has_player2z() const {
  return _internal_has_player2z();
}
inline void Msg::clear_player2z() {
  player2z_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float Msg::_internal_player2z() const {
  return player2z_;
}
inline float Msg::player2z() const {
  // @@protoc_insertion_point(field_get:Msg.player2Z)
  return _internal_player2z();
}
inline void Msg::_internal_set_player2z(float value) {
  _has_bits_[0] |= 0x00001000u;
  player2z_ = value;
}
inline void Msg::set_player2z(float value) {
  _internal_set_player2z(value);
  // @@protoc_insertion_point(field_set:Msg.player2Z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
