// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_msg_2eproto__INCLUDED
#define PROTOBUF_msg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_msg_2eproto();
void protobuf_AssignDesc_msg_2eproto();
void protobuf_ShutdownFile_msg_2eproto();

class Msg;

// ===================================================================

class Msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Msg) */ {
 public:
  Msg();
  virtual ~Msg();

  Msg(const Msg& from);

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg& default_instance();

  void Swap(Msg* other);

  // implements Message ----------------------------------------------

  inline Msg* New() const { return New(NULL); }

  Msg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isHitting = 1;
  bool has_ishitting() const;
  void clear_ishitting();
  static const int kIsHittingFieldNumber = 1;
  bool ishitting() const;
  void set_ishitting(bool value);

  // required int32 playerId = 16;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 16;
  ::google::protobuf::int32 playerid() const;
  void set_playerid(::google::protobuf::int32 value);

  // required int32 player1Score = 2;
  bool has_player1score() const;
  void clear_player1score();
  static const int kPlayer1ScoreFieldNumber = 2;
  ::google::protobuf::int32 player1score() const;
  void set_player1score(::google::protobuf::int32 value);

  // required int32 player2Score = 3;
  bool has_player2score() const;
  void clear_player2score();
  static const int kPlayer2ScoreFieldNumber = 3;
  ::google::protobuf::int32 player2score() const;
  void set_player2score(::google::protobuf::int32 value);

  // required float ballX = 4;
  bool has_ballx() const;
  void clear_ballx();
  static const int kBallXFieldNumber = 4;
  float ballx() const;
  void set_ballx(float value);

  // required float ballY = 5;
  bool has_bally() const;
  void clear_bally();
  static const int kBallYFieldNumber = 5;
  float bally() const;
  void set_bally(float value);

  // required float ballZ = 6;
  bool has_ballz() const;
  void clear_ballz();
  static const int kBallZFieldNumber = 6;
  float ballz() const;
  void set_ballz(float value);

  // required int32 player1X = 10;
  bool has_player1x() const;
  void clear_player1x();
  static const int kPlayer1XFieldNumber = 10;
  ::google::protobuf::int32 player1x() const;
  void set_player1x(::google::protobuf::int32 value);

  // required int32 player1Y = 11;
  bool has_player1y() const;
  void clear_player1y();
  static const int kPlayer1YFieldNumber = 11;
  ::google::protobuf::int32 player1y() const;
  void set_player1y(::google::protobuf::int32 value);

  // required int32 player1Z = 12;
  bool has_player1z() const;
  void clear_player1z();
  static const int kPlayer1ZFieldNumber = 12;
  ::google::protobuf::int32 player1z() const;
  void set_player1z(::google::protobuf::int32 value);

  // required int32 player2X = 13;
  bool has_player2x() const;
  void clear_player2x();
  static const int kPlayer2XFieldNumber = 13;
  ::google::protobuf::int32 player2x() const;
  void set_player2x(::google::protobuf::int32 value);

  // required int32 player2Y = 14;
  bool has_player2y() const;
  void clear_player2y();
  static const int kPlayer2YFieldNumber = 14;
  ::google::protobuf::int32 player2y() const;
  void set_player2y(::google::protobuf::int32 value);

  // required int32 player2Z = 15;
  bool has_player2z() const;
  void clear_player2z();
  static const int kPlayer2ZFieldNumber = 15;
  ::google::protobuf::int32 player2z() const;
  void set_player2z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Msg)
 private:
  inline void set_has_ishitting();
  inline void clear_has_ishitting();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_player1score();
  inline void clear_has_player1score();
  inline void set_has_player2score();
  inline void clear_has_player2score();
  inline void set_has_ballx();
  inline void clear_has_ballx();
  inline void set_has_bally();
  inline void clear_has_bally();
  inline void set_has_ballz();
  inline void clear_has_ballz();
  inline void set_has_player1x();
  inline void clear_has_player1x();
  inline void set_has_player1y();
  inline void clear_has_player1y();
  inline void set_has_player1z();
  inline void clear_has_player1z();
  inline void set_has_player2x();
  inline void clear_has_player2x();
  inline void set_has_player2y();
  inline void clear_has_player2y();
  inline void set_has_player2z();
  inline void clear_has_player2z();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool ishitting_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 player1score_;
  ::google::protobuf::int32 player2score_;
  float ballx_;
  float bally_;
  float ballz_;
  ::google::protobuf::int32 player1x_;
  ::google::protobuf::int32 player1y_;
  ::google::protobuf::int32 player1z_;
  ::google::protobuf::int32 player2x_;
  ::google::protobuf::int32 player2y_;
  ::google::protobuf::int32 player2z_;
  friend void  protobuf_AddDesc_msg_2eproto();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
  static Msg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Msg

// required bool isHitting = 1;
inline bool Msg::has_ishitting() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg::set_has_ishitting() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg::clear_has_ishitting() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg::clear_ishitting() {
  ishitting_ = false;
  clear_has_ishitting();
}
inline bool Msg::ishitting() const {
  // @@protoc_insertion_point(field_get:Msg.isHitting)
  return ishitting_;
}
inline void Msg::set_ishitting(bool value) {
  set_has_ishitting();
  ishitting_ = value;
  // @@protoc_insertion_point(field_set:Msg.isHitting)
}

// required int32 playerId = 16;
inline bool Msg::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 Msg::playerid() const {
  // @@protoc_insertion_point(field_get:Msg.playerId)
  return playerid_;
}
inline void Msg::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:Msg.playerId)
}

// required int32 player1Score = 2;
inline bool Msg::has_player1score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg::set_has_player1score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg::clear_has_player1score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg::clear_player1score() {
  player1score_ = 0;
  clear_has_player1score();
}
inline ::google::protobuf::int32 Msg::player1score() const {
  // @@protoc_insertion_point(field_get:Msg.player1Score)
  return player1score_;
}
inline void Msg::set_player1score(::google::protobuf::int32 value) {
  set_has_player1score();
  player1score_ = value;
  // @@protoc_insertion_point(field_set:Msg.player1Score)
}

// required int32 player2Score = 3;
inline bool Msg::has_player2score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg::set_has_player2score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg::clear_has_player2score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg::clear_player2score() {
  player2score_ = 0;
  clear_has_player2score();
}
inline ::google::protobuf::int32 Msg::player2score() const {
  // @@protoc_insertion_point(field_get:Msg.player2Score)
  return player2score_;
}
inline void Msg::set_player2score(::google::protobuf::int32 value) {
  set_has_player2score();
  player2score_ = value;
  // @@protoc_insertion_point(field_set:Msg.player2Score)
}

// required float ballX = 4;
inline bool Msg::has_ballx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Msg::set_has_ballx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Msg::clear_has_ballx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Msg::clear_ballx() {
  ballx_ = 0;
  clear_has_ballx();
}
inline float Msg::ballx() const {
  // @@protoc_insertion_point(field_get:Msg.ballX)
  return ballx_;
}
inline void Msg::set_ballx(float value) {
  set_has_ballx();
  ballx_ = value;
  // @@protoc_insertion_point(field_set:Msg.ballX)
}

// required float ballY = 5;
inline bool Msg::has_bally() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Msg::set_has_bally() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Msg::clear_has_bally() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Msg::clear_bally() {
  bally_ = 0;
  clear_has_bally();
}
inline float Msg::bally() const {
  // @@protoc_insertion_point(field_get:Msg.ballY)
  return bally_;
}
inline void Msg::set_bally(float value) {
  set_has_bally();
  bally_ = value;
  // @@protoc_insertion_point(field_set:Msg.ballY)
}

// required float ballZ = 6;
inline bool Msg::has_ballz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Msg::set_has_ballz() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Msg::clear_has_ballz() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Msg::clear_ballz() {
  ballz_ = 0;
  clear_has_ballz();
}
inline float Msg::ballz() const {
  // @@protoc_insertion_point(field_get:Msg.ballZ)
  return ballz_;
}
inline void Msg::set_ballz(float value) {
  set_has_ballz();
  ballz_ = value;
  // @@protoc_insertion_point(field_set:Msg.ballZ)
}

// required int32 player1X = 10;
inline bool Msg::has_player1x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Msg::set_has_player1x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Msg::clear_has_player1x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Msg::clear_player1x() {
  player1x_ = 0;
  clear_has_player1x();
}
inline ::google::protobuf::int32 Msg::player1x() const {
  // @@protoc_insertion_point(field_get:Msg.player1X)
  return player1x_;
}
inline void Msg::set_player1x(::google::protobuf::int32 value) {
  set_has_player1x();
  player1x_ = value;
  // @@protoc_insertion_point(field_set:Msg.player1X)
}

// required int32 player1Y = 11;
inline bool Msg::has_player1y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Msg::set_has_player1y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Msg::clear_has_player1y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Msg::clear_player1y() {
  player1y_ = 0;
  clear_has_player1y();
}
inline ::google::protobuf::int32 Msg::player1y() const {
  // @@protoc_insertion_point(field_get:Msg.player1Y)
  return player1y_;
}
inline void Msg::set_player1y(::google::protobuf::int32 value) {
  set_has_player1y();
  player1y_ = value;
  // @@protoc_insertion_point(field_set:Msg.player1Y)
}

// required int32 player1Z = 12;
inline bool Msg::has_player1z() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Msg::set_has_player1z() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Msg::clear_has_player1z() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Msg::clear_player1z() {
  player1z_ = 0;
  clear_has_player1z();
}
inline ::google::protobuf::int32 Msg::player1z() const {
  // @@protoc_insertion_point(field_get:Msg.player1Z)
  return player1z_;
}
inline void Msg::set_player1z(::google::protobuf::int32 value) {
  set_has_player1z();
  player1z_ = value;
  // @@protoc_insertion_point(field_set:Msg.player1Z)
}

// required int32 player2X = 13;
inline bool Msg::has_player2x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Msg::set_has_player2x() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Msg::clear_has_player2x() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Msg::clear_player2x() {
  player2x_ = 0;
  clear_has_player2x();
}
inline ::google::protobuf::int32 Msg::player2x() const {
  // @@protoc_insertion_point(field_get:Msg.player2X)
  return player2x_;
}
inline void Msg::set_player2x(::google::protobuf::int32 value) {
  set_has_player2x();
  player2x_ = value;
  // @@protoc_insertion_point(field_set:Msg.player2X)
}

// required int32 player2Y = 14;
inline bool Msg::has_player2y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Msg::set_has_player2y() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Msg::clear_has_player2y() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Msg::clear_player2y() {
  player2y_ = 0;
  clear_has_player2y();
}
inline ::google::protobuf::int32 Msg::player2y() const {
  // @@protoc_insertion_point(field_get:Msg.player2Y)
  return player2y_;
}
inline void Msg::set_player2y(::google::protobuf::int32 value) {
  set_has_player2y();
  player2y_ = value;
  // @@protoc_insertion_point(field_set:Msg.player2Y)
}

// required int32 player2Z = 15;
inline bool Msg::has_player2z() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Msg::set_has_player2z() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Msg::clear_has_player2z() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Msg::clear_player2z() {
  player2z_ = 0;
  clear_has_player2z();
}
inline ::google::protobuf::int32 Msg::player2z() const {
  // @@protoc_insertion_point(field_get:Msg.player2Z)
  return player2z_;
}
inline void Msg::set_player2z(::google::protobuf::int32 value) {
  set_has_player2z();
  player2z_ = value;
  // @@protoc_insertion_point(field_set:Msg.player2Z)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2eproto__INCLUDED
